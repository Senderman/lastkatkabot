package com.senderman.lastkatkabot.command.user;

import com.annimon.tgbotsmodule.api.methods.Methods;
import com.annimon.tgbotsmodule.commands.context.MessageContext;
import com.senderman.lastkatkabot.annotation.Command;
import com.senderman.lastkatkabot.command.CommandExecutor;
import com.senderman.lastkatkabot.config.BotConfig;
import com.senderman.lastkatkabot.dbservice.AdminService;
import com.senderman.lastkatkabot.dbservice.FeedbackService;
import com.senderman.lastkatkabot.model.Feedback;
import com.senderman.lastkatkabot.util.Html;
import jakarta.inject.Singleton;

import java.util.stream.Collectors;
import java.util.stream.StreamSupport;

@Singleton
@Command
public class SendFeedbackCommand implements CommandExecutor {

    private final FeedbackService feedbackRepo;
    private final AdminService adminRepo;
    private final BotConfig config;

    public SendFeedbackCommand(
            FeedbackService feedbackRepo,
            AdminService adminRepo, BotConfig config
    ) {
        this.feedbackRepo = feedbackRepo;
        this.adminRepo = adminRepo;
        this.config = config;
    }

    @Override
    public String command() {
        return "/feedback";
    }

    @Override
    public String getDescription() {
        return "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É. –ù–∞–ø—Ä–∏–º–µ—Ä, /feedback –±–æ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç";
    }

    @Override
    public void accept(MessageContext ctx) {
        ctx.setArgumentsLimit(1);
        if (ctx.argumentsLength() < 1) {
            ctx.replyToMessage("–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª-–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤!").callAsync(ctx.sender);
            return;
        }
        var feedbackText = Html.htmlSafe(ctx.argument(0));
        if (feedbackText.length() > 2000) {
            ctx.replyToMessage("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞ - 2000 —Å–∏–º–≤–æ–ª–æ–≤!").callAsync(ctx.sender);
            return;
        }
        var user = ctx.user();
        var userLink = Html.getUserLink(user);

        var feedback = new Feedback(feedbackText, user.getId(), user.getFirstName(), ctx.chatId(), ctx.message().getMessageId());
        feedback = feedbackRepo.insert(feedback);
        var feedbackId = feedback.getId();
        var adminPings = StreamSupport.stream(adminRepo.findAll().spliterator(), false)
                .map(a -> "<a href=\"tg://user?id=" + a.getUserId() + "\">" + a.getName() + "</a>")
                .collect(Collectors.joining(", "));
        var text = ("""
                üîî <b>–§–∏–¥–±–µ–∫ #%d</b>

                –û—Ç: %s

                %s

                –î–ª—è –æ—Ç–≤–µ—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ /fresp %d &lt;–≤–∞—à –æ—Ç–≤–µ—Ç&gt;
                                
                üö® %s""")
                .formatted(feedbackId, userLink, feedbackText, feedbackId, adminPings);
        Methods.sendMessage(config.feedbackChannelId(), text).callAsync(ctx.sender);
        ctx.replyToMessage("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º!").callAsync(ctx.sender);
    }
}
