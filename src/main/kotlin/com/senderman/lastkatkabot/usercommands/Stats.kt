package com.senderman.lastkatkabot.usercommands

import com.senderman.lastkatkabot.LastkatkaBotHandler
import com.senderman.lastkatkabot.Services
import com.senderman.neblib.CommandExecutor
import com.senderman.neblib.TgUser
import org.telegram.telegrambots.meta.api.methods.groupadministration.GetChatMember
import org.telegram.telegrambots.meta.api.objects.Message
import org.telegram.telegrambots.meta.exceptions.TelegramApiException

class Stats(private val handler: LastkatkaBotHandler) : CommandExecutor {
    override val command: String
        get() = "/stats"
    override val desc: String
        get() = "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞. –†–µ–ø–ª–∞–µ–º –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ–ø–ª–∞–π–Ω—É—Ç–æ–≥–æ"

    override fun execute(message: Message) {
        val player = if (!message.isReply) message.from else message.replyToMessage.from
        if (player.bot) {
            handler.sendMessage(
                message.chatId, "–ù–æ —ç—Ç–æ –∂–µ –ø—Ä–æ—Å—Ç–æ –±–æ—Ç, –∏–º–∏—Ç–∞—Ü–∏—è —á–µ–ª–æ–≤–µ–∫–∞! " +
                        "–†–∞–∑–≤–µ –º–æ–∂–µ—Ç –±–æ—Ç –Ω–∞–ø–∏—Å–∞—Ç—å —Å–∏–º—Ñ–æ–Ω–∏—é, –∏–º–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –∏–≥—Ä–∞—Ç—å –≤ BnC, –ª—é–±–∏—Ç—å?"
            )
            return
        }
        val user = TgUser(player)
        val stats = Services.db.getStats(player.id)
        val (_, duelWins, totalDuels, bnc, loverId, childId, coins) = stats
        val winRate = if (totalDuels == 0) 0 else 100 * duelWins / totalDuels
        var text = """
            üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ${user.name}:

            –î—É—ç–ª–µ–π –≤—ã–∏–≥—Ä–∞–Ω–æ: $duelWins
            –í—Å–µ–≥–æ –¥—É—ç–ª–µ–π: $totalDuels
            –í–∏–Ω—Ä–µ–π—Ç: $winRate%
            
            üí∞ –î–µ–Ω—å–≥–∏: $coins
            üêÆ –ë–∞–ª–ª–æ–≤ –∑–∞ –±—ã–∫–∏ –∏ –∫–æ—Ä–æ–≤—ã: $bnc
        """.trimIndent()

        if (loverId != 0) {
            val lover =
                try {
                    TgUser(handler.execute(GetChatMember().setChatId(loverId.toLong()).setUserId(loverId)).user)
                } catch (e: TelegramApiException) {
                    try {
                        TgUser(handler.execute(GetChatMember().setChatId(message.chatId).setUserId(loverId)).user)
                    } catch (e: TelegramApiException) {
                        TgUser(loverId, "–ë–µ–∑ –∏–º–µ–Ω–∏")
                    }
                }
            text += "\n‚ù§Ô∏è –í—Ç–æ—Ä–∞—è –ø–æ–ª–æ–≤–∏–Ω–∫–∞: "
            text += if (message.isUserMessage) lover.link else lover.name
        }

        if (childId != 0) {
            val child =
                try {
                    TgUser(handler.execute(GetChatMember().setChatId(childId.toLong()).setUserId(childId)).user)
                } catch (e: TelegramApiException) {
                    try {
                        TgUser(handler.execute(GetChatMember().setChatId(message.chatId).setUserId(childId)).user)
                    } catch (e: TelegramApiException) {
                        TgUser(childId, "–ë–µ–∑ –∏–º–µ–Ω–∏")
                    }
                }
            text += "\n\uD83D\uDC76\uD83C\uDFFBÔ∏è –†–µ–±–µ–Ω–æ–∫: "
            text += if (message.isUserMessage) child.link else child.name
        }

        handler.sendMessage(message.chatId, text)
    }
}